* DEL CloneMut Pinnning instead of Boxing
* DEL Use Dynamic Dispatch on Container Wrappers Instead of Generics.
* DEL builder pattern with associated type.
Can't do. Associated type need to have the same generics for all implementations of
the trait. Here two implementations may have different generics so we can't have
generics in the associated type. Then if generic are attached to the trait impl
instead, we have the problem of having unconstrained type parameters when the type
built has different generics than the type built from.
* DEL Rename wrapper into transform
* DEL Compact IO Map
Instead of building a map with elements offset based on key hash,
just pack elements to be more space efficient.
* DEL async Get and GetMut
Because there might be delay fetching far data.
* DEL Prefetcher Trait
* DONE Clone for Concurrent Containers.
* DONE Lock Poisoning.
	When a thread owning a lock panics, it goes out of scope without unlocking,
	leaving other lock users in a deadlock situation.
#+begin_src 
#+language: rust
std::thread::panicking
#+end_src
* DONE Parallel Tests
Build Concurrent Container trait tests.
* DONE Test Stream building block
* DONE Individual components unit tests.
* DONE Builder pattern to build a cache.
* DONE Reference wrapper to wrap values into references.
	The building block name is "policy" and goes in a different directory
	than wrapper.
* DONE Compression building block.
* DONE Documentation pass
* DONE inclusive connector building block.
Insertions go into the last level and shallow copies of what is in the
last level goes in the first level.
* DONE [Capacity / Pop / Push] based on size and not number of elements.
** DONE Array
** DONE BTree
** DONE Compression
** DONE Stream
* DONE Client/Server Building Block
+ Persistent server
+ Multiclient server
* DONE Get trait with LifetimeGuard wrapper in the return type.
* DONE Configuration Builder:
+ config to toml
+ Build to config
* DONE Decorator
Decorators are containers wrapping their values into a cell.
Decorator takes a Factory generic. The Factory wraps/decorate a value that
goes in the container.
`decorator` module provides a way to chain Factories into a FactoryChain.
Policies should movo into `decorator` module.
* DONE Flush stopper:
Stop flushes between two levels always returning an empty iterator.
* TODO Fix serde recursion in decorator and inclusive containers. 
* TODO Prefetcher building block implementations.
A building block wrapping another and asynchronously prefetching keys based.
on some predictions.
* TODO Resizable building blocks.
#+begin_src 
#+language: rust
pub trait Resizable {
    /// Change the container maximum capacity.
    ///
    /// If the container is shrunk and the new size does not fit all elements
    /// then some victim elements are evicted out. 
    fn resize(self, new_capacity: usize) -> Vec<(K,V)>;
}
#+end_src
* TODO On File Container with Metadata in a separate file.
The idea is that a container value would have a significant size on file and
reading its metadata to make a decision should not require to read the entire 
value.
* TODO Parallel Associative Container Methods.
Make methods in associative container parallel.
* TODO Const Hash Trait:
	Add a user interface for customizing how keys are 
	hashed into buckets for associative container.
* TODO Distributed building block
* TODO Front-ends
For instance:
+ The Memory is partitionned with only 50% to the user. On user page fault event,
user pages are written to the cache;
+ A POSIX buffered filesystem implementation where reads and writes go to
the cache;
* TODO Batch builder implementation.
* TODO Marker trait:
+ ValueDecorator instead of Policy, with DecorationFactory
+ ContainerDecorator for Sequential, Profiler, etc.
+ Multiplexer: For Sequential, Associative
+ Connector: For Inclusive, Exclusive
* TODO Readme and Contributing guide
* TODO Coverage test
* TODO Logging
* TODO CI.
* TODO Builder refresh
Rename `Build` trait into `BuildingBlockBuilder`.
Make sure we can build all containers with it.
* TODO Benchmarks:
+ Multiple distributions of keys
+ Different sizes of keys and values.
